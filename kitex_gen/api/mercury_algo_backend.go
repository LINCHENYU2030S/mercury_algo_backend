// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
)

type BaseResponse struct {
	Code    int32  `thrift:"code,1,required" frugal:"1,required,i32" json:"code"`
	Message string `thrift:"message,2,required" frugal:"2,required,string" json:"message"`
}

func NewBaseResponse() *BaseResponse {
	return &BaseResponse{}
}

func (p *BaseResponse) InitDefault() {
}

func (p *BaseResponse) GetCode() (v int32) {
	return p.Code
}

func (p *BaseResponse) GetMessage() (v string) {
	return p.Message
}
func (p *BaseResponse) SetCode(val int32) {
	p.Code = val
}
func (p *BaseResponse) SetMessage(val string) {
	p.Message = val
}

func (p *BaseResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResponse(%+v)", *p)
}

var fieldIDToName_BaseResponse = map[int16]string{
	1: "code",
	2: "message",
}

type TradingBot struct {
	Name                       string   `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	TradingPair                string   `thrift:"trading_pair,3,required" frugal:"3,required,string" json:"trading_pair"`
	ArithmeticAnnualizedReturn *float64 `thrift:"arithmetic_annualized_return,4,optional" frugal:"4,optional,double" json:"arithmetic_annualized_return,omitempty"`
	SharpeRatio                *float64 `thrift:"sharpe_ratio,5,optional" frugal:"5,optional,double" json:"sharpe_ratio,omitempty"`
	MaximumDrawdown            *float64 `thrift:"maximum_drawdown,6,optional" frugal:"6,optional,double" json:"maximum_drawdown,omitempty"`
	UserCount                  *int32   `thrift:"user_count,7,optional" frugal:"7,optional,i32" json:"user_count,omitempty"`
}

func NewTradingBot() *TradingBot {
	return &TradingBot{}
}

func (p *TradingBot) InitDefault() {
}

func (p *TradingBot) GetName() (v string) {
	return p.Name
}

func (p *TradingBot) GetTradingPair() (v string) {
	return p.TradingPair
}

var TradingBot_ArithmeticAnnualizedReturn_DEFAULT float64

func (p *TradingBot) GetArithmeticAnnualizedReturn() (v float64) {
	if !p.IsSetArithmeticAnnualizedReturn() {
		return TradingBot_ArithmeticAnnualizedReturn_DEFAULT
	}
	return *p.ArithmeticAnnualizedReturn
}

var TradingBot_SharpeRatio_DEFAULT float64

func (p *TradingBot) GetSharpeRatio() (v float64) {
	if !p.IsSetSharpeRatio() {
		return TradingBot_SharpeRatio_DEFAULT
	}
	return *p.SharpeRatio
}

var TradingBot_MaximumDrawdown_DEFAULT float64

func (p *TradingBot) GetMaximumDrawdown() (v float64) {
	if !p.IsSetMaximumDrawdown() {
		return TradingBot_MaximumDrawdown_DEFAULT
	}
	return *p.MaximumDrawdown
}

var TradingBot_UserCount_DEFAULT int32

func (p *TradingBot) GetUserCount() (v int32) {
	if !p.IsSetUserCount() {
		return TradingBot_UserCount_DEFAULT
	}
	return *p.UserCount
}
func (p *TradingBot) SetName(val string) {
	p.Name = val
}
func (p *TradingBot) SetTradingPair(val string) {
	p.TradingPair = val
}
func (p *TradingBot) SetArithmeticAnnualizedReturn(val *float64) {
	p.ArithmeticAnnualizedReturn = val
}
func (p *TradingBot) SetSharpeRatio(val *float64) {
	p.SharpeRatio = val
}
func (p *TradingBot) SetMaximumDrawdown(val *float64) {
	p.MaximumDrawdown = val
}
func (p *TradingBot) SetUserCount(val *int32) {
	p.UserCount = val
}

func (p *TradingBot) IsSetArithmeticAnnualizedReturn() bool {
	return p.ArithmeticAnnualizedReturn != nil
}

func (p *TradingBot) IsSetSharpeRatio() bool {
	return p.SharpeRatio != nil
}

func (p *TradingBot) IsSetMaximumDrawdown() bool {
	return p.MaximumDrawdown != nil
}

func (p *TradingBot) IsSetUserCount() bool {
	return p.UserCount != nil
}

func (p *TradingBot) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradingBot(%+v)", *p)
}

var fieldIDToName_TradingBot = map[int16]string{
	2: "name",
	3: "trading_pair",
	4: "arithmetic_annualized_return",
	5: "sharpe_ratio",
	6: "maximum_drawdown",
	7: "user_count",
}

type ListBotsRequest struct {
	PageSize    *int32  `thrift:"page_size,1,optional" frugal:"1,optional,i32" json:"page_size,omitempty"`
	PageNum     *int32  `thrift:"page_num,2,optional" frugal:"2,optional,i32" json:"page_num,omitempty"`
	TradingPair *string `thrift:"trading_pair,3,optional" frugal:"3,optional,string" json:"trading_pair,omitempty"`
}

func NewListBotsRequest() *ListBotsRequest {
	return &ListBotsRequest{}
}

func (p *ListBotsRequest) InitDefault() {
}

var ListBotsRequest_PageSize_DEFAULT int32

func (p *ListBotsRequest) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return ListBotsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListBotsRequest_PageNum_DEFAULT int32

func (p *ListBotsRequest) GetPageNum() (v int32) {
	if !p.IsSetPageNum() {
		return ListBotsRequest_PageNum_DEFAULT
	}
	return *p.PageNum
}

var ListBotsRequest_TradingPair_DEFAULT string

func (p *ListBotsRequest) GetTradingPair() (v string) {
	if !p.IsSetTradingPair() {
		return ListBotsRequest_TradingPair_DEFAULT
	}
	return *p.TradingPair
}
func (p *ListBotsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListBotsRequest) SetPageNum(val *int32) {
	p.PageNum = val
}
func (p *ListBotsRequest) SetTradingPair(val *string) {
	p.TradingPair = val
}

func (p *ListBotsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListBotsRequest) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *ListBotsRequest) IsSetTradingPair() bool {
	return p.TradingPair != nil
}

func (p *ListBotsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBotsRequest(%+v)", *p)
}

var fieldIDToName_ListBotsRequest = map[int16]string{
	1: "page_size",
	2: "page_num",
	3: "trading_pair",
}

type ListBotsResponse struct {
	Base *BaseResponse `thrift:"base,1,required" frugal:"1,required,BaseResponse" json:"base"`
	Bots []*TradingBot `thrift:"bots,2,optional" frugal:"2,optional,list<TradingBot>" json:"bots,omitempty"`
}

func NewListBotsResponse() *ListBotsResponse {
	return &ListBotsResponse{}
}

func (p *ListBotsResponse) InitDefault() {
}

var ListBotsResponse_Base_DEFAULT *BaseResponse

func (p *ListBotsResponse) GetBase() (v *BaseResponse) {
	if !p.IsSetBase() {
		return ListBotsResponse_Base_DEFAULT
	}
	return p.Base
}

var ListBotsResponse_Bots_DEFAULT []*TradingBot

func (p *ListBotsResponse) GetBots() (v []*TradingBot) {
	if !p.IsSetBots() {
		return ListBotsResponse_Bots_DEFAULT
	}
	return p.Bots
}
func (p *ListBotsResponse) SetBase(val *BaseResponse) {
	p.Base = val
}
func (p *ListBotsResponse) SetBots(val []*TradingBot) {
	p.Bots = val
}

func (p *ListBotsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListBotsResponse) IsSetBots() bool {
	return p.Bots != nil
}

func (p *ListBotsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBotsResponse(%+v)", *p)
}

var fieldIDToName_ListBotsResponse = map[int16]string{
	1: "base",
	2: "bots",
}

type MercuryAlgoBackendService interface {
	ListBots(ctx context.Context, req *ListBotsRequest) (r *ListBotsResponse, err error)
}

type MercuryAlgoBackendServiceListBotsArgs struct {
	Req *ListBotsRequest `thrift:"req,1" frugal:"1,default,ListBotsRequest" json:"req"`
}

func NewMercuryAlgoBackendServiceListBotsArgs() *MercuryAlgoBackendServiceListBotsArgs {
	return &MercuryAlgoBackendServiceListBotsArgs{}
}

func (p *MercuryAlgoBackendServiceListBotsArgs) InitDefault() {
}

var MercuryAlgoBackendServiceListBotsArgs_Req_DEFAULT *ListBotsRequest

func (p *MercuryAlgoBackendServiceListBotsArgs) GetReq() (v *ListBotsRequest) {
	if !p.IsSetReq() {
		return MercuryAlgoBackendServiceListBotsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MercuryAlgoBackendServiceListBotsArgs) SetReq(val *ListBotsRequest) {
	p.Req = val
}

func (p *MercuryAlgoBackendServiceListBotsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MercuryAlgoBackendServiceListBotsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MercuryAlgoBackendServiceListBotsArgs(%+v)", *p)
}

var fieldIDToName_MercuryAlgoBackendServiceListBotsArgs = map[int16]string{
	1: "req",
}

type MercuryAlgoBackendServiceListBotsResult struct {
	Success *ListBotsResponse `thrift:"success,0,optional" frugal:"0,optional,ListBotsResponse" json:"success,omitempty"`
}

func NewMercuryAlgoBackendServiceListBotsResult() *MercuryAlgoBackendServiceListBotsResult {
	return &MercuryAlgoBackendServiceListBotsResult{}
}

func (p *MercuryAlgoBackendServiceListBotsResult) InitDefault() {
}

var MercuryAlgoBackendServiceListBotsResult_Success_DEFAULT *ListBotsResponse

func (p *MercuryAlgoBackendServiceListBotsResult) GetSuccess() (v *ListBotsResponse) {
	if !p.IsSetSuccess() {
		return MercuryAlgoBackendServiceListBotsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MercuryAlgoBackendServiceListBotsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListBotsResponse)
}

func (p *MercuryAlgoBackendServiceListBotsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MercuryAlgoBackendServiceListBotsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MercuryAlgoBackendServiceListBotsResult(%+v)", *p)
}

var fieldIDToName_MercuryAlgoBackendServiceListBotsResult = map[int16]string{
	0: "success",
}
