// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mercury_algo_backend/models"
)

func newTradingBot(db *gorm.DB, opts ...gen.DOOption) tradingBot {
	_tradingBot := tradingBot{}

	_tradingBot.tradingBotDo.UseDB(db, opts...)
	_tradingBot.tradingBotDo.UseModel(&models.TradingBot{})

	tableName := _tradingBot.tradingBotDo.TableName()
	_tradingBot.ALL = field.NewAsterisk(tableName)
	_tradingBot.ID = field.NewInt32(tableName, "id")
	_tradingBot.Name = field.NewString(tableName, "name")
	_tradingBot.TradingPair = field.NewString(tableName, "trading_pair")
	_tradingBot.ArithmeticAnnualizedReturn = field.NewFloat32(tableName, "arithmetic_annualized_return")
	_tradingBot.SharpeRatio = field.NewFloat32(tableName, "sharpe_ratio")
	_tradingBot.MaximumDrawdown = field.NewFloat32(tableName, "maximum_drawdown")
	_tradingBot.UserCount = field.NewInt32(tableName, "user_count")

	_tradingBot.fillFieldMap()

	return _tradingBot
}

type tradingBot struct {
	tradingBotDo

	ALL                        field.Asterisk
	ID                         field.Int32
	Name                       field.String
	TradingPair                field.String
	ArithmeticAnnualizedReturn field.Float32
	SharpeRatio                field.Float32
	MaximumDrawdown            field.Float32
	UserCount                  field.Int32

	fieldMap map[string]field.Expr
}

func (t tradingBot) Table(newTableName string) *tradingBot {
	t.tradingBotDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tradingBot) As(alias string) *tradingBot {
	t.tradingBotDo.DO = *(t.tradingBotDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tradingBot) updateTableName(table string) *tradingBot {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.TradingPair = field.NewString(table, "trading_pair")
	t.ArithmeticAnnualizedReturn = field.NewFloat32(table, "arithmetic_annualized_return")
	t.SharpeRatio = field.NewFloat32(table, "sharpe_ratio")
	t.MaximumDrawdown = field.NewFloat32(table, "maximum_drawdown")
	t.UserCount = field.NewInt32(table, "user_count")

	t.fillFieldMap()

	return t
}

func (t *tradingBot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tradingBot) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["trading_pair"] = t.TradingPair
	t.fieldMap["arithmetic_annualized_return"] = t.ArithmeticAnnualizedReturn
	t.fieldMap["sharpe_ratio"] = t.SharpeRatio
	t.fieldMap["maximum_drawdown"] = t.MaximumDrawdown
	t.fieldMap["user_count"] = t.UserCount
}

func (t tradingBot) clone(db *gorm.DB) tradingBot {
	t.tradingBotDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tradingBot) replaceDB(db *gorm.DB) tradingBot {
	t.tradingBotDo.ReplaceDB(db)
	return t
}

type tradingBotDo struct{ gen.DO }

type ITradingBotDo interface {
	gen.SubQuery
	Debug() ITradingBotDo
	WithContext(ctx context.Context) ITradingBotDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITradingBotDo
	WriteDB() ITradingBotDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITradingBotDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITradingBotDo
	Not(conds ...gen.Condition) ITradingBotDo
	Or(conds ...gen.Condition) ITradingBotDo
	Select(conds ...field.Expr) ITradingBotDo
	Where(conds ...gen.Condition) ITradingBotDo
	Order(conds ...field.Expr) ITradingBotDo
	Distinct(cols ...field.Expr) ITradingBotDo
	Omit(cols ...field.Expr) ITradingBotDo
	Join(table schema.Tabler, on ...field.Expr) ITradingBotDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITradingBotDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITradingBotDo
	Group(cols ...field.Expr) ITradingBotDo
	Having(conds ...gen.Condition) ITradingBotDo
	Limit(limit int) ITradingBotDo
	Offset(offset int) ITradingBotDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITradingBotDo
	Unscoped() ITradingBotDo
	Create(values ...*models.TradingBot) error
	CreateInBatches(values []*models.TradingBot, batchSize int) error
	Save(values ...*models.TradingBot) error
	First() (*models.TradingBot, error)
	Take() (*models.TradingBot, error)
	Last() (*models.TradingBot, error)
	Find() ([]*models.TradingBot, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TradingBot, err error)
	FindInBatches(result *[]*models.TradingBot, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.TradingBot) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITradingBotDo
	Assign(attrs ...field.AssignExpr) ITradingBotDo
	Joins(fields ...field.RelationField) ITradingBotDo
	Preload(fields ...field.RelationField) ITradingBotDo
	FirstOrInit() (*models.TradingBot, error)
	FirstOrCreate() (*models.TradingBot, error)
	FindByPage(offset int, limit int) (result []*models.TradingBot, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITradingBotDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tradingBotDo) Debug() ITradingBotDo {
	return t.withDO(t.DO.Debug())
}

func (t tradingBotDo) WithContext(ctx context.Context) ITradingBotDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tradingBotDo) ReadDB() ITradingBotDo {
	return t.Clauses(dbresolver.Read)
}

func (t tradingBotDo) WriteDB() ITradingBotDo {
	return t.Clauses(dbresolver.Write)
}

func (t tradingBotDo) Session(config *gorm.Session) ITradingBotDo {
	return t.withDO(t.DO.Session(config))
}

func (t tradingBotDo) Clauses(conds ...clause.Expression) ITradingBotDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tradingBotDo) Returning(value interface{}, columns ...string) ITradingBotDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tradingBotDo) Not(conds ...gen.Condition) ITradingBotDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tradingBotDo) Or(conds ...gen.Condition) ITradingBotDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tradingBotDo) Select(conds ...field.Expr) ITradingBotDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tradingBotDo) Where(conds ...gen.Condition) ITradingBotDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tradingBotDo) Order(conds ...field.Expr) ITradingBotDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tradingBotDo) Distinct(cols ...field.Expr) ITradingBotDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tradingBotDo) Omit(cols ...field.Expr) ITradingBotDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tradingBotDo) Join(table schema.Tabler, on ...field.Expr) ITradingBotDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tradingBotDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITradingBotDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tradingBotDo) RightJoin(table schema.Tabler, on ...field.Expr) ITradingBotDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tradingBotDo) Group(cols ...field.Expr) ITradingBotDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tradingBotDo) Having(conds ...gen.Condition) ITradingBotDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tradingBotDo) Limit(limit int) ITradingBotDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tradingBotDo) Offset(offset int) ITradingBotDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tradingBotDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITradingBotDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tradingBotDo) Unscoped() ITradingBotDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tradingBotDo) Create(values ...*models.TradingBot) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tradingBotDo) CreateInBatches(values []*models.TradingBot, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tradingBotDo) Save(values ...*models.TradingBot) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tradingBotDo) First() (*models.TradingBot, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.TradingBot), nil
	}
}

func (t tradingBotDo) Take() (*models.TradingBot, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.TradingBot), nil
	}
}

func (t tradingBotDo) Last() (*models.TradingBot, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.TradingBot), nil
	}
}

func (t tradingBotDo) Find() ([]*models.TradingBot, error) {
	result, err := t.DO.Find()
	return result.([]*models.TradingBot), err
}

func (t tradingBotDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TradingBot, err error) {
	buf := make([]*models.TradingBot, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tradingBotDo) FindInBatches(result *[]*models.TradingBot, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tradingBotDo) Attrs(attrs ...field.AssignExpr) ITradingBotDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tradingBotDo) Assign(attrs ...field.AssignExpr) ITradingBotDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tradingBotDo) Joins(fields ...field.RelationField) ITradingBotDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tradingBotDo) Preload(fields ...field.RelationField) ITradingBotDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tradingBotDo) FirstOrInit() (*models.TradingBot, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.TradingBot), nil
	}
}

func (t tradingBotDo) FirstOrCreate() (*models.TradingBot, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.TradingBot), nil
	}
}

func (t tradingBotDo) FindByPage(offset int, limit int) (result []*models.TradingBot, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tradingBotDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tradingBotDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tradingBotDo) Delete(models ...*models.TradingBot) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tradingBotDo) withDO(do gen.Dao) *tradingBotDo {
	t.DO = *do.(*gen.DO)
	return t
}
